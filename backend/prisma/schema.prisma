// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum TopicStatus {
  OPEN
  ASSIGNED
  CLOSED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  verified  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  topics         Topic[] @relation("TopicAuthor") // topics the user authored
  assignedTopics Topic[] @relation("TopicAssignee") // topics assigned to this user (tutor/admin)
  replies        Reply[]
  uploads        File[] // files uploaded by this user (optional)
}

model Topic {
  id         String      @id @default(cuid())
  title      String
  content    String
  status     TopicStatus @default(OPEN)
  authorId   String
  assigneeId String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // relations
  author   User    @relation("TopicAuthor", fields: [authorId], references: [id])
  assignee User?   @relation("TopicAssignee", fields: [assigneeId], references: [id])
  replies  Reply[]
  files    File[] // ?? back-relation for File.topic
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User  @relation(fields: [authorId], references: [id])
  topic  Topic @relation(fields: [topicId], references: [id])
}

model File {
  id        String   @id @default(cuid())
  url       String
  mime      String
  size      Int
  createdAt DateTime @default(now())

  // optional link to a topic
  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])

  // optional: who uploaded
  uploaderId String?
  uploader   User?   @relation(fields: [uploaderId], references: [id])
}
